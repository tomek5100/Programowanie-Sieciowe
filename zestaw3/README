Zajęcia nr 3, 2022-03-16 i -17
Dalej obowiązuje C/C++. Dwa pierwsze zadania skreślamy z uwagi na koronawirusa. Ostatnie zadanie jest ważne, macie Państwo sześć dni na jego zrobienie. W przyszłym tygodniu przedyskutujemy programy, który przysłaliście, i w razie potrzeby będziecie mieli następne sześć dni na przysłanie poprawionych wersji.

Zadania:

(nieobowiązkowe, bo zajęcia są zdalne) Dokończ pisanie par klient-serwer dla TCP/IPv4 oraz UDP/IPv4 (co razem daje cztery programy). Przetestuj czy działają poprawnie gdy klient i serwer są uruchomione na dwóch różnych komputerach w SPK. Wymaga to znajomości adresu IP przydzielonego komputerowi, na którym uruchamiany jest serwer — można go znaleźć w wynikach polecenia ip address show.

(nieobowiązkowe, bo zajęcia są zdalne) Sprawdź co się dzieje, gdy podasz zły adres IP albo zły numer portu serwera. Czy jądro systemu operacyjnego daje nam w jakiś sposób o tym znać? Jeśli tak, to jak długo trzeba czekać, aż jądro poinformuje nasz proces o wystąpieniu błędu?

Pamiętaj, że protokoły sieciowe z korekcją błędów wykonują wielokrotne retransmisje pakietów w zwiększających się odstępach czasu. Może to zająć nawet kilkadziesiąt minut. Nie pomyl sytuacji „proces zawiesza się na pięć minut zanim jądro zwróci -1” z sytuacją „zawiesza się na stałe”.

Jeśli któryś z klientów może się zawiesić czekając w nieskończoność na odpowiedź z nieistniejącego serwera, to popraw jego kod aby tego nie robił. W slajdach z wykładu są pokazane funkcje, które pozwalają na wykonywanie operacji we-wy z timeoutem (możecie go Państwo ustawić np. na 10 sekund).

Przeanalizuj niniejszą specyfikację protokołu sumowania liczb (uwaga, nie jest ona taka jak w przykładzie z automatem na wykładzie!). Czy jest ona jednoznaczna, czy też może zostawia pewne rzeczy niedopowiedziane?

Komunikacja pomiędzy klientem a serwerem odbywa się przy pomocy datagramów. Klient wysyła datagram zawierający liczby, serwer odpowiada datagramem zawierającym pojedynczą liczbę (obliczoną sumę) bądź komunikat o błędzie.

Zawartość datagramów interpretujemy jako tekst w ASCII. Ciągi cyfr ASCII interpretujemy jako liczby dziesiętne. Datagram może zawierać albo cyfry i spacje, albo pięć znaków składających się na słowo „ERROR”; żadne inne znaki nie są dozwolone (ale patrz następny akapit).

Aby ułatwić ręczne testowanie serwera przy pomocy ncat, serwer może również akceptować datagramy mające na końcu dodatkowy znak \n (czyli bajt o wartości 10) albo dwa znaki \r\n (bajty 13, 10). Serwer może wtedy, ale nie musi, dodać \r\n do zwracanej odpowiedzi.

Korekta: powyższy akapit miał błędnie podane liczbowe kody znaków \r i \n. Pomyłka została poprawiona i teraz już jest dobrze.

Napisz serwer UDP/IPv4 nasłuchujący na porcie nr 2020 i implementujący powyższy protokół.

Serwer musi weryfikować odebrane dane i zwracać komunikat o błędzie jeśli są one nieprawidłowe w sensie zgodności ze specyfikacją protokołu.

W kodzie używaj zmiennych roboczych któregoś ze standardowych typów całkowitoliczbowych (int, unsigned long int, uint32_t, itd.). Co za tym idzie, odebrany ciąg cyfr będzie mógł reprezentować liczbę zbyt dużą, aby dało się ją zapisać w zmiennej wybranego typu. Podobnie może się zdarzyć, że podczas dodawania wystąpi przepełnienie (ang. overflow). Serwer ma obowiązek wykrywać takie sytuacje i zwracać błąd. Uwadze Państwa polecam pliki nagłówkowe limits.h oraz stdint.h, w których znaleźć można m.in. stałą INT_MAX oraz stałą UINT32_MAX.

To zadanie jest ważne — zaimplementowane rozwiązanie trzeba przesłać prowadzącemu najpóźniej we wtorek 22 / środę 23 marca, nawet jeśli nie jest jeszcze w pełni gotowe, bo np. brak w nim obsługi przepełnień.

Zajęcia nr 4, 2022-03-23 i -24
W tym tygodniu zajmiemy się testowaniem. Przy implementowaniu protokołów sieciowych samo napisanie kodu to tylko początek pracy — potem trzeba sprawdzić, czy ten kod jest zgodny ze specyfikacją protokołu. Trzeba przetestować, czy akceptuje on wszystkie zapytania, które wg specyfikacji są poprawne, czy wykrywa i odrzuca wszystkie te, które są niepoprawne, i czy zwracane odpowiedzi mają zgodny ze specyfikacją format.

Przy okazji kilka słów o wykrywaniu przepełnień arytmetycznych. Ktoś kiedyś próbował oddać program, w którym był taki kod:

unsigned int suma, u;

// tu coś było robione z tymi dwoma zmiennymi

suma = suma + u;
if (suma > UINT_MAX) {   // nie działa
    // obsłuż przepełnienie
}
Albo może to było napisane tak:

unsigned int suma, u;

// tu coś było robione z tymi dwoma zmiennymi

if (suma + u > UINT_MAX) {   // też nie działa
    // obsłuż przepełnienie
} else {
    suma = suma + u;
}
Jeśli nie jest dla Państwa oczywiste, dlaczego powyższe próby wykrywania przepełnienia nie mają sensu, to się proszę zastanówcie: w której dokładnie chwili podczas wykonywania programu pojawia się przepełnienie? Która z operacji wykonywanych przez procesor komputera zwraca błędny wynik i jakie ma to konsekwencje dla następnych operacji?

Druga sprawa: niektóre osoby do konwersji ciągu cyfr ASCII na liczbę wykorzystują funkcje z biblioteki standardowej, takie jak atoi, strtol czy strtoull. Czy sprawdziliście, jak te funkcje się zachowują gdy ta liczba jest zbyt duża (np. gdy dostaną ciąg złożony z czterdziestu cyfr „7”)? Czy kod serwera sprawdza status zwracany przez wywoływaną funkcję i w razie błędu odpowiednio reaguje?

Zadania:

Przetestuj ręcznie serwer UDP dodający liczby. Jeśli akceptuje końcowe \r\n, to możesz to zrobić uruchamiając

ncat --udp --crlf 127.0.0.1 2020
albo
socat stdio udp4:127.0.0.1:2020,crlf
i wpisując kolejne zapytania z klawiatury.

Zapytanie bez końcowego \r\n czy też \n można wygenerować np. poleceniem printf podłączonym do wejścia socata:

printf "1 23 7" | socat -t 5.0 stdio udp4:127.0.0.1:2020
Przełącznik -t 5.0 nakazuje socatowi odczekać pięć sekund po zakończeniu wysyłania danych do serwera i zakończyć działanie. Jakiś timeout jest niezbędny, bo socat nie wie, że nasze sumatory zwracają dokładnie jeden datagram. W ogólnym przypadku odpowiedź z serwera UDP może się przecież składać z wielu datagramów, a na poziomie bezpołączeniowego protokołu transportowego, jakim jest UDP, nie ma po czym poznać że już je wszystkie odebrano.

Często spotykanym w poprzednich latach błędem było zwracanie przez serwer dodatkowych bajtów o wartości zero, bo np. ktoś w kodzie zadeklarował sobie char wynik[20], użył sprintf aby „wydrukować” do tej tablicy tekstową reprezentację obliczonej sumy (która zajęła tylko kilka początkowych elementów tablicy), a potem przez pomyłkę wysłał klientowi całą 20-bajtową tablicę. Ten błąd łatwo przegapić, bo bajty o wartości zero są niewidoczne gdy się je wyświetla na ekranie.

Aby sprawdzić jakie dokładnie bajty są w strumieniu danych trzeba ten strumień wysłać nie wprost na ekran, lecz np. na wejście programu od. Proszę porównać to, co wypisują dwa poniższe polecenia:

printf "abc ijk\0xyz\n"

printf "abc ijk\0xyz\n" | od -A d -t u1 -t c
Użyte przełączniki nakazują wyświetlić kolejne bajty w postaci dziesiętnej oraz jako znaki ASCII (bajty odpowiadające niedrukowalnym znakom kontrolnym są wyświetlane jako sekwencje z backslashem na początku).

Proszę spróbować zapisać zwrócone przez serwer dane do pliku, a potem ten plik wyświetlić za pomocą od:

ncat --udp --crlf 127.0.0.1 2020 > wynik-z-serwera.txt

printf "2 2" | socat -t 5.0 stdio udp4:127.0.0.1:2020 > wynik-z-serwera.txt

od -A d -t u1 -t c < wynik-z-serwera.txt
Możliwość przekierowania równocześnie wejścia i wyjścia socata można wykorzystać do stworzenia powtarzalnych testów. Załóżmy, że w pliku test-dane.txt jest ciąg bajtów składający się na zapytanie testowe. Uruchamiamy

socat -t 5.0 stdio udp4:127.0.0.1:2020 < test-dane.txt > wynik-z-serwera.txt
Jeśli przygotowaliśmy również plik test-wynik.txt, to przy pomocy poleceń cmp albo diff można łatwo porównać zawartość pliku wynik-z-serwera.txt ze wzorcowym wynikiem.

socat nie radzi sobie z datagramami mającymi długość zero bajtów, nie da się więc przy jego pomocy wysłać pustego zapytania. Jeśli chcesz sprawdzić, jak sumator reaguje na pusty datagram, to zamiast socata użyj programu mini-udpcat.py, który został napisany specjalnie na potrzeby tych zajęć.

Przygotuj kilka par plików z przykładowymi zapytaniami i oczekiwanymi wynikami. Uwzględnij także błędne zapytania, na które odpowiedzią powinno być „ERROR”.

Wymień się tymi plikami z dwiema-trzema innymi osobami z grupy. Sprawdź, czy Twój serwer poprawnie obsługuje zapytania przygotowane przez inne osoby. Jeśli nie, to spróbujcie wspólnie ustalić przyczynę: różnice w rozumieniu specyfikacji protokołu, korzystanie w teście z opcjonalnej funkcjonalności, którą nie wszystkie serwery muszą implementować (u nas: \r\n na końcu datagramu), błędy w kodzie serwera, coś innego?

(nieobowiązkowe, ale przydatne) Przygotuj sobie narzędzie automatycznie testujące sumator w oparciu o powyższe pliki z zapytaniami i odpowiedziami. Na przykład prosty skrypt w języku uniksowej powłoki, wywołujący polecenia używane w poprzednich punktach. Możesz też napisać program w C albo innym języku, wczytujący te pliki oraz komunikujący się przez gniazdko z serwerem. Zanim jednak się zabierzesz za jego pisanie, to lepiej sprawdź czy w sieci nie da się znaleźć gotowego narzędzia do testowania usług UDP — wielce możliwe, że ktoś już coś takiego zaimplementował.

Jeśli dzięki testowaniu znajdziecie Państwo błędy w kodzie i je poprawicie, albo jeśli wczoraj przesłana wersja sumatora była nie w pełni zaimplementowana (chodzi mi tu głównie o brak obsługi przepełnień arytmetycznych), to możecie wysłać poprawioną wersję najpóźniej we wtorek 29 / środę 30 marca. Zalecam wysyłanie poprzez submit-files, a nie e-mailem.